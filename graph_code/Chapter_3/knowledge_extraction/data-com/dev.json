[
    {
        "summary": "计算机网络的功能",
        "content": "计算机网络向用户提供的最重要的功能有两个，即：(1)连通性；(2)共享。所谓连通性(connectivity), 就是计算机网络使上网用户之间都可以交换信息，好像这些用户的计算机都可以彼此直接连通一样。所谓共享就是指资源共享。资源共享的含义是多方面的。可以是信息共享、软件共享，也可以是硬件共享。"
    },
    {
        "summary": "广域网的特点",
        "content": "广域网 WAN(Wide Area Network) 广域网的作用范围通常为几十到几千公里，因而有时也称为远程网(long haul network)。广域网是因特网的核心部分，其任务是通过长距离(例如，跨越不同的国家)运送主机所发送的数据。连接广域网各结点交换机的链路一般 都是高速链路，具有较大的通信容量。"
    },
    {
        "summary": "城域网的特点",
        "content": "城域网MAN(Metropolitan Area Network)   城域网的作用范围一般是一个城市，可跨越几个街区甚至整个的城市，其作用距离约为5～50 km。城域网可以为一个或几个单位所拥有，但也可以是一种公用设施，用来将多个局域网进行互连。目前，很多城域网采用的是以太网技术，因此城域网有时也常纳入局域网的范围进行讨论。"
    },
    {
        "summary": "局域网的特点",
        "content": "局域网LAN(Local Area Network)       局域网一般用微型计算机或工作站通过高速通信线路相连(速率通常在10 Mb/s 以上),但地理上则局限在较小的范围(如1 km 左右)。在局域网发展的初期，一个学校或工厂往往只拥有一个局域网，但现在局域网已非常广泛地使用，一个学校或企业大都拥有许多个互连的局域网(这样的网络常称为校园网或企业网)。"
    },
    {
        "summary": "公用网的概念",
        "content": "公用网(public network)   这是指电信公司(国有或私有)出资建造的大型网络。“公用”的意思就是所有愿意按电信公司的规定交纳费用的人都可以使用这种网络。因此公用网也可称为公众网，如CHINANET."
    },
    {
        "summary": "专用网的概念",
        "content": "专用网(private network)   这是某个部门、某个行业为各自的特殊业务工作需要而建造的网络。这种网络不对外人提供服务。例如，政府、军队、银行、铁路、电力、公安等系统均有本系统的专用网。"
    },
    {
        "summary": "接入网的概念",
        "content": "这种网络就是接入网 AN(Access  Network), 它又称为本地接入网或居民接入网。这是一类比较特殊的计算机网络。我们在前面的1.2.2 节已经介绍了用户必须通过 ISP 才能接入到因特网。由于从用户家中接入到因特网可以使用的技术有许多种，因此就出现了可以使用多种接入网技术连接到因特网的情况。接入网本身既不属于因特网的核心部分，也不属于因特网的边缘部分。接入网是从某个端系统到另一个端系统的路径中，由这个端系统到第一个路由器(也称为边缘路由器)之间的一些物理链路所组成。从覆盖的范围看，很多接入网还是属于局域网。从作用上看，接入网只是起到让用户能够与因特网连接的“桥梁”作用。"
    },
    {
        "summary": "速率的概念",
        "content": "速率是计算机网络中最重要的一个性能指标。速率的单位是 b/s (比特每秒)(或 bit/s, 有时也写为 bps, 即 bit per second)。当数据率较高时，就可以用 kb/s(k=10³=千)、Mb/s(M=10⁶=兆)、Gb/s(G=10⁹=吉)或Tb/s(T=10¹²=太)"
    },
    {
        "summary": "带宽的概念",
        "content": "带宽用来表示网络的通信线路传送数据的能力，因此网络带宽表示在单位时间内从网络中的某一点到另一点所能通过的“最高数据率”。这种意义的带宽的单位是“比特每秒”,记为b/s。在这种单位的前面也常常加上千(k)、兆(M)、吉(G)或太(T)这样的倍数。"
    },
    {
        "summary": "吞吐量的概念",
        "content": "吞吐量(throughput) 表示在单位时间内通过某个网络(或信道、接口)的数据量。吞吐量更经常地用于对现实世界中的网络的一种测量，以便知道实际上到底有多少数据量能够通过网络。"
    },
    {
        "summary": "时延的概念",
        "content": "时延(delay 或 latency)是指数据(一个报文或分组，甚至比特)从网络(或链路)的一端传送到另一端所需的时间。时延是个很重要的性能指标，它有时也称为延迟或迟延。"
    },
    {
        "summary": "时延的组成",
        "content": "需要注意的是，网络中的时延是由以下几个不同的部分组成的：(1)发送时延发送时延(transmission  delay)是主机或路由器发送数据帧所需要的时间，也就是从发送数据帧的第一个比特算起，到该帧的最后一个比特发送完毕所需的时间。因此发送时延也叫做“传输时延”。(2)传播时延传播时延(propagation delay)是电磁波在信道中传播一定的距离需要花费的时间。(3)处理时延主机或路由器在收到分组时要花费一定的时间进行处理，例如分析分组的首部、从分组中提取数据部分、进行差错检验或查找适当的路由等等，这就产生了处理时延。(4)排队时延分组在经过网络传输时，要经过许多路由器。但分组在进入路由器后要先在输入队列中排队等待处理。在路由器确定了转发接口后，还要在输出队列中排队等待转发。这就产生了排队时延。"
    },
    {
        "summary": "计算机网络体系结构的概念",
        "content": "我们把计算机网络的各层及其协议的集合，称为网络的体系结构(architecture)。换种说法，计算机网络的体系结构就是这个计算机网络及其构件所应完成的功能的精确定义[GREE82]。"
    },
    {
        "summary": "协议的概念",
        "content": "在计算机网络中要做到有条不紊地交换数据，就必须遵守一些事先约定好的规则。这些规则明确规定了所交换的数据的格式以及有关的同步问题。这里所说的同步不是狭义的(即同频或同频同相)而是广义的，即在一定的条件下应当发生什么事件(如发送一个应答信息),因而同步含有时序的意思。这些为进行网络中的数据交换而建立的规则、标准或约定称为网络协议(network protocol)。网络协议也可简称为协议。"
    },
    {
        "summary": "服务访问点SAP的概念",
        "content": "在同一系统中相邻两层的实体进行交互(即交换信息)的地方，通常称为服务访问点SAP(Service Access Point)。服务访问点SAP是一个抽象的概念，它实际上就是一个逻辑接口，有点像邮政信箱(可以把邮件放入信箱和从信箱中取走邮件),但这种层间接口和两个设备之间的硬件接口(并行的或串行的)并不一样."
    },
    {
        "summary": "协议和服务的区别",
        "content": "一定要弄清楚，协议和服务在概念上是很不一样的。首先，协议的实现保证了能够向上一层提供服务。使用本层服务的实体只能看见服务而无法看见下面的协议。也就是说，下面的协议对上面的实体是透明的。其次，协议是“水平的”,即协议是控制对等实体之间通信的规则。但服务是“垂直的”,即服务是由下层向上层通过层间接口提供的。另外，并非在一个层内完成的全部功能都称为服务。只有那些能够被高一层实体“看得见”的功能才能称之为“服务”。"
    },
    {
        "summary": "TCP/IP参考模型",
        "content": "TCP/IP是一个四层的体系结构(图1-18(b)),它包含应用层、运输层、网际层和网络接口层(用网际层这个名字是强调这一层是为了解决不同网络的互连问题)。不过从实质上讲，TCP/IP只有最上面的三层，因为最下面的网络接口层基本上和一般的通信链路在功能上没有多大差别，对于计算机网络来说，这一层并没有什么特别新的具体内容。因此在学习计算机网络的原理时往往采取折中的办法，即综合OSI和TCP/IP的优点，采用一种只有五层协议的体系结构(图1-18(c)),这样既简洁又能将概念阐述清楚."
    },
    {
        "summary": "信道和电路的关系",
        "content": "信道和电路并不等同。信道一般用来表示向某一个方向传送信息的媒体。因此，一条通信电路往往包含一条发送信道和一条接收信道。"
    },
    {
        "summary": "信号的概念",
        "content": "信号则是数据的电气或电磁的表现。"
    },
    {
        "summary": "波特率的概念",
        "content": "波特率是指每秒传送的码元数。"
    },
    {
        "summary": "速率的概念",
        "content": "速率是指每秒传送的比特数。"
    },
    {
        "summary": "源点的概念",
        "content": "源点设备产生要传输的数据，例如，从PC的键盘输入汉字，PC产生输出的数字比特流。源点又称为源站，或信源。"
    },
    {
        "summary": "香农公式的含义",
        "content": "在1948年，信息论的创始人香农(Shannon)推导出了著名的香农公式。香农公式指出：信道的极限信息传输速率C是C=Wlog₂(1+S/N)(b/s) 式中，W为信道的带宽（以Hz为单位）; S为信道内所传信号的平均功率；N为信道内部的高斯噪声功率。"
    },
    {
        "summary": "物理层接口特性",
        "content": "(1)机械特性   指明接口所用接线器的形状和尺寸，引脚数目和排列，固定和锁定装 置，等等。平时常见的各种规格的接插件都有严格的标准化的规定。(2)电气特性   指明在接口电缆的各条线上出现的电压的范围。(3)功能特性   指明某条线上出现的某一电平的电压表示何种意义。(4)过程特性   指明对于不同功能的各种可能事件的出现顺序。"
    },
    {
        "summary": "CSMA/CD协议的要点",
        "content": "根据以上所讨论的，可以把CSMA/CD  协议的要点归纳如下：(1)准备发送：适配器从网络层获得一个分组，加上以太网的首部和尾部(见本章的 3.4.3节),组成以太网帧，放入适配器的缓存中。但在发送之前，必须先检测信道。(2)检测信道：若检测到信道忙，则应不停地检测， 一直等待信道转为空闲。若检测到 信道空闲，并在96比特时间内信道保持空闲(保证了帧间最小间隔),就发送这个帧。(3)在发送过程中仍不停地检测信道，即网络适配器要边发送边监听。这里只有两种可 能性：一是发送成功：在争用期内一直未检测到碰撞。这个帧肯定能够发送成功。发送完毕 后，其他什么也不做。然后回到(1)。二是发送失败：在争用期内检测到碰撞。这时立即停止发送数据，并按规定发送人为 干扰信号。适配器接着就执行指数退避算法，等待 r 倍512 比特时间后，返回到步骤(2),  继续检测信道。但若重传达16次仍不能成功，则停止重传而向上报错。"
    },
    {
        "summary": "封装成帧的概念",
        "content": "封装成帧(framing)就是在一段数据的前后分别添加首部和尾部，这样就构成了一个帧。 接收端在收到物理层上交的比特流后，就能根据首部和尾部的标记，从收到的比特流中识别 帧的开始和结束。"
    },
    {
        "summary": "透明传输的概念",
        "content": "当传送的帧是用文本文件组成的帧时(文本文件中的字符都是从键盘上输入的),其数 据部分显然不会出现像SOH 或 EOT 这样的帧定界控制字符。可见不管从键盘上输入什么字 符都可以放在这样的帧中传输过去，因此这样的传输就是透明传输。"
    },
    {
        "summary": "比特差错的概念",
        "content": "现实的通信链路都不会是理想的。这就是说，比特在传输过程中可能会产生差错：1 可 能 会变成0,而0也可能变成1。这就叫做比特差错。 比特差错是传输差错中的一种。本小节所说 的“差错”,如无特殊说明，就是指“比特差错”"
    },
    {
        "summary": "可靠传输的概念",
        "content": "请注意，我们现在并没有要求数据链路层向网络层提供“可靠传输”的服务。所谓 “可靠传输”就是：数据链路层的发送端发送什么，在接收端就收到什么。"
    },
    {
        "summary": "PPP的帧格式",
        "content": "PPP 的帧格式如图3- 10所示。 PPP 帧的首部和尾部分别为四个字段和两个字段。首部的第一个字段和尾部的第二个字段都是标志字段 F(Flag), 规 定 为 0x7E  ( 符 号 “0x” 表 示 它 后 面 的 字 符 是 用 十 六 进 制 表 示 的 。 十 六 进 制 的 7E 的二进制表示是 01111110)。标志字段表示一个帧的开始或结束。因此标志字段就是 PPP 帧的定界符。连续 两帧之间只需要用一个标志字段。如果出现连续两个标志字段，就表示这是一个空帧，应当 丢弃。"
    },
    {
        "summary": "零比特填充的具体做法",
        "content": "零比特填充的具体做法是：在发送端，先扫描整个信息字段(通常是用硬件实现，但 也可用软件实现，只是会慢些)。只要发现有5个连续1,则立即填入一个0。因此经过这种 零比特填充后的数据，就可以保证在信息字段中不会出现6个连续1。接收端在收到一个帧 时，先找到标志字段 F  以确定一个帧的边界，接着再用硬件对其中的比特流进行扫描。每 当发现5个连续1时，就把这5个连续1后的一个0删除，以还原成原来的信息比特流 (图3-11)。这样就保证了透明传输：在所传送的数据比特流中可以传送任意组合的比特 流， 而不会引起对帧边界的判断错误。"
    },
    {
        "summary": "集线器的特点",
        "content": "集线器工作在物理层，它的每个接口仅仅简单地转发比特—— 收到1 就 转 发 1 , 收 到0就转发0,不进行碰撞检测。若两个接口同时有信号输入(即发生碰撞),那么所有的 接口都将收不到正确的帧。图3-20是具有三个接口的集线器的示意图。"
    },
    {
        "summary": "硬件地址的概念",
        "content": "在局域网中，硬件地址又称为物理地址或 MAC  地址(因为这种地址用在 MAC  帧 中)。"
    },
    {
        "summary": "MAC帧的格式",
        "content": "以太网V2 的 MAC  帧比较为简单，由五个字段组成。前两个字段分别为6字节长的目 的地址和源地址字段。第三个字段是2字节的类型字段， 用来标志上一层使用的是什么协 议，以便把收到的 MAC  帧的数据上交给上一层的这个协议。例如，当类型字段的值是 0x0800 时，就表示上层使用的是 IP 数据报。若类型字段的值为0x8137, 则表示该帧是由 Novell IPX 发过来的。第四个字段是数据字段， 其长度在46到1500字节之间(46字节是 这样得出的：最小长度64字节减去18 字节的首部和尾部就得出数据字段的最小长度)。最 后一个字段是4字节的帧检验序列FCS (使用CRC 检验)。当传输媒体的误码率为1×10-⁸  时，MAC  子层可使未检测到的差错小于1×10-14。"
    },
    {
        "summary": "虚拟局域网VLAN的概念",
        "content": "虚拟局域网 VLAN   是由一些局域网网段构成的与物理位置无关的逻辑组，而这些网段具有某些共同的需求。每一个 VLAN   的帧都有一个明确的标识符，指明发送这个帧的工作站是属于哪一个VLAN"
    },
    {
        "summary": "集线器的特点",
        "content": "从技术上讲，网桥的接口数很少， 一般只有2～4个，而以太网交换机通常都有十几个 接口。因此， 以太网交换机实质上就是一个多接口的网桥， 和工作在物理层的转发器、集线 器有很大的差别。此外，以太网交换机的每个接口都直接与一个单个主机或另一个集线器相 连(注意：普通网桥的接口往往是连接到以太网的一个网段),并且一般都工作在全双工方 式。当主机需要通信时，交换机能同时连通许多对的接口，使每一对相互通信的主机都能像 独占传输媒体那样，无碰撞地传输数据。以太网交换机和透明网桥一样，也是一种即插即用 设备，其内部的帧转发表也是通过自学习算法自动地逐渐建立起来的。当两个站通信完成后 就断开连接。以太网交换机由于使用了专用的交换结构芯片，其交换速率就较高"
    },
    {
        "summary": "路由器的概念",
        "content": "路由器其实就是一台专用计算机，用来在互联网中进行路由选择"
    },
    {
        "summary": "虚拟互联网络的概念",
        "content": "所谓虚拟互连网络也就是逻辑互连网络，它的意思就是互连起来的各种物理网络的异构性本来是客观存在的，但是 我们利用 IP  协议就可以使这些性能各异的网络在网络层上看起来好像是一个统一的网络。  这种使用 IP 协议的虚拟互连网络可简称为 IP 网 (IP 网是虚拟的，但平常不必每次都强调 “虚拟”二字)。使用 IP 网的好处是：当 IP 网上的主机进行通信时，就好像在一个单个网 络上通信一样，它们看不见互连的各网络的具体异构细节(如具体的编址方案、路由选择协 议，等等)。"
    },
    {
        "summary": "分类的IP地址的概念",
        "content": "所谓“分类的IP 地址”就是将IP 地址划分为若干个固定类，每一类地址都由两个固定 长度的字段组成，其中第一个字段是网络号(net-id), 它标志主机(或路由器)所连接到的网 络。 一个网络号在整个因特网范围内必须是唯一的。第二个字段是主机号(host-id), 它标志该主机(或路由器)。 一个主机号在它前面的网络号所指明的网络范围内必须是唯一的。由 此可见， 一个IP 地址在整个因特网范围内是唯一的。"
    },
    {
        "summary": "A类地址的特点",
        "content": "A 类地址的主机号占3字节，因此每一个A 类网络中的最大主机数是2²4-2,即 16777214。这里减2的原因是：全0的主机号字段表示该IP 地址是“本主机”所连接到的 单个网络地址 (例如， 一主机的IP 地址为5.6.7.8,则该主机所在的网络地址就是5.0.0.0), 而全1表示“所有的(all)\", 因此全1的主机号字段表示该网络上的所有主机\"。"
    },
    {
        "summary": "B类地址的特点",
        "content": "B 类地址的网络号字段有2字节，但前面两位(10)已经固定了，只剩下14位可以进 行分配。因为网络号字段后面的14位无论怎样取值也不可能出现使整个2字节的网络号字 段成为全0或全1,因此这里不存在网络总数减2的问题。但实际上B 类网络地址128.0.0.0是不指派的，而可以指派的 B 类最小网络地址是128.1.0.0 [COME06]。  因 此B 类地址可指派的网络数为214- 1,即16383。 B 类地址的每一个网络上的最大主机数是2¹⁶-2,即 65534。这里需要减2是因为要扣除全0和全1的主机号。整个B 类地址空间共约有230个 地址，占整个IP 地址空间的25%"
    },
    {
        "summary": "C类地址的特点",
        "content": "C 类地址有3个字节的网络号字段，最前面的3位是(110),还有21 位可以进行分 配。 C 类网络地址192.0.0.0 也是不指派的，可以指派的 C 类最小网络地址是192.0.1.0 [COME06],  因 此C 类地址可指派的网络总数是2²¹-1,即2097151。每一个C 类地址的最 大主机数是2⁸- 2,即254。整个 C 类地址空间共约有229个地址，占整个 IP 地址的 12.5%。"
    },
    {
        "summary": "ARP协议的作用",
        "content": "在实际应用中，我们经常会遇到这样的问题：已经知道了一个机器(主机或路由器) 的 IP 地址，需要找出其相应的硬件地址。地址解析协议ARP  就是用来解决这样的问题的。 图4- 10说明了ARP 协议的作用。"
    },
    {
        "summary": "ARP协议的原理",
        "content": "(1)ARP  进程在本局域网上广播发送一个 ARP  请求分组(具体格式可参阅[COME06]第23章)。图4- 11(a)是主机 A 广播发送 ARP  请求分组的示意图。 ARP  请求分组的主要内 容是：“我的 IP 地址是209.0.0.5,硬件地址是00-00-C0-15-AD-18。 我想知道 IP 地址为 209.0.0.6的主机的硬件地址。\"(2)在本局域网上的所有主机上运行的ARP 进程都收到此 ARP 请求分组。(3)主机B 的 IP 地址与ARP 请求分组中要查询的IP 地址一致，就收下这个 ARP 请求 分组，并向主机 A 发送 ARP 响应分组(其格式见[COME06]), 并在这个 ARP 响应分组中 写入自己的硬件地址。由于其余的所有主机的IP 地址都与 ARP 请求分组中要查询的 IP 地 址不一致，因此都不理睬这个ARP 请求分组，见图4-11(b)。ARP 响应分组的主要内容是表 明：“我的 IP 地址是209.0.0.6,我的硬件地址是08-00-2B-00-EE-0A。”请注意：虽然 ARP 请求分组是广播发送的，但 ARP 响应分组是普通的单播，即从一个源地址发送到一个目的 地址。(4)主机A 收到主机B 的 ARP 响应分组后，就在其ARP 高速缓存中写入主机B 的 IP 地址到硬件地址的映射。"
    },
    {
        "summary": "IP数据报的格式",
        "content": "从图4-13可看出， 一个IP 数据报由首部和数据两部分组成。首部的前一部分是固定长 度，共20字节，是所有IP数据报必须具有的。在首部的固定部分的后面是一些可选字段， 其长度是可变的。下面介绍首部各字段的意义。"
    },
    {
        "summary": "片偏移字段的含义",
        "content": "占13位。片偏移指出：较长的分组在分片后，某片在原分组中的相对位置。也就是说，相对于用户数据字段的起点，该片从何处开始。片偏移以8个字节为偏移 单位。这就是说，每个分片的长度一定是8字节(64位)的整数倍。"
    },
    {
        "summary": "生存时间字段的特点",
        "content": "生存时间   占8位，生存时间字段常用的英文缩写是TTL(Time   To   Live),  表明 是数据报在网络中的寿命。由发出数据报的源点设置这个字段。其目的是防止无法交付的数 据报无限制地在因特网中兜圈子(例如从路由器R₁  转发到R₂, 再转发到R₃, 然后又转发到 R₁), 因而白白消耗网络资源。最初的设计是以秒作为 TTL 值的单位。每经过一个路由器 时，就把 TTL 减去数据报在路由器所消耗掉的一段时间。若数据报在路由器消耗的时间小 于1秒，就把TTL 值减1。当TTL 值减为零时，就丢弃这个数据报。"
    },
    {
        "summary": "协议字段的特点",
        "content": "占8位，协议字段指出此数据报携带的数据是使用何种协议，以便使目的 主机的IP 层知道应将数据部分上交给哪个处理过程。"
    },
    {
        "summary": "首部检验和字段的特点",
        "content": "首部检验和    占16位。这个字段只检验数据报的首部，但不包括数据部分。这 是因为数据报每经过一个路由器，路由器都要重新计算一下首部检验和(一些字段，如生存 时间、标志、片偏移等都可能发生变化)。不检验数据部分可减少计算的工作量。为了进一 步减小计算检验和的工作量， IP 首部的检验和不采用复杂的 CRC 检验码而采用下面的简单计算方法：在发送方，先把 IP 数据报首部划分为许多16 位字的序列，并把检验和字段置 零。用反码算术运算①把所有16 位字相加后，将得到的和的反码写入检验和字段。接收方 收到数据报后，将首部的所有16 位字再使用反码算术运算相加一次。将得到的和取反码， 即得出接收方检验和的计算结果。若首部未发生任何变化，则此结果必为0,于是就保留这 个数据报。否则即认为出差错，并将此数据报丢弃。图4-15说明了IP 数据报首部检验和的 计算过程。"
    },
    {
        "summary": "IP数据报首部可变部分的含义",
        "content": "IP 首部的可变部分就是一个选项字段。选项字段用来支持排错、测量以及安全等措 施，内容很丰富。此字段的长度可变，从1个字节到40 个字节不等，取决于所选择的项 目。某些选项项目只需要1个字节，它只包括1个字节的选项代码。但还有些选项需要多个 字节，这些选项一个个拼接起来，中间不需要有分隔符，最后用全0的填充字段补齐成为4 字节的整数倍。"
    },
    {
        "summary": "命令线的功能",
        "content": "命令线主要用以传输 CPU 向设备发出的各种命令信号，如启动、清除、屏蔽、读、写等。它是一组单向总线，其根数与命令信号多少有关。"
    },
    {
        "summary": "状态线的功能",
        "content": "状态线是将I/0设备的状态向主机报告的信号线，例如，设备是否准备就绪，是否向CPU.发出中断请求等。它也是一组单向总线。"
    },
    {
        "summary": "接口的功能",
        "content": "根据上述设置接口的理由，可归纳出接口通常应具有以下几个功能以及相应的硬件配置。(1)选址功能(2)传送命令的功能(3)传送数据的功能(4)反映I/0  设备工作状态的功能"
    },
    {
        "summary": "选址功能",
        "content": "由于I/0 总线与所有设备的接口电路相连，但CPU 究竟选择哪台设备，还得通过设备选择 线上的设备码来确定。"
    },
    {
        "summary": "传送命令的功能",
        "content": "当 CPU 向 I/0 设备发出命令时，要求I/0 设备能做出响应，如果I/0 接口不具备传送命令 信息的功能，那么设备将无法响应，故通常在I/0  接口中设有存放命令的命令寄存器以及命令译码器"
    },
    {
        "summary": "传送数据的功能",
        "content": "既然接口处于主机与I/0 设备之间，因此数据必须通过接口才能实现主机与I/0 设备之间 的传送。这就要求接口中具有数据通路，完成数据传送。"
    },
    {
        "summary": "反映I/0设备工作状态的功能",
        "content": "为了使CPU能及时了解各I/0设备的工作状态，接口内必须设置一些反映设备工作状态的触发器。例如，用完成触发器D 和工作触发器B 来标志设备所处的状态。"
    },
    {
        "summary": "I/0接口分类",
        "content": "按数据传送方式分类，有并行接口和串行接口两类。"
    },
    {
        "summary": "I/0接口分类",
        "content": "按功能选择的灵活性分类，有可编程接口和不可编程接口两种。"
    },
    {
        "summary": "I/0接口分类",
        "content": "按通用性分类有通用接口和专用接口。"
    },
    {
        "summary": "I/0接口分类",
        "content": "按数据传送的控制方式分类，有程序型接口和DMA型接口。"
    },
    {
        "summary": "并行接口",
        "content": "并行接口是将一个字节(或一个字) 的所有位同时传送(如Intel 8255)"
    },
    {
        "summary": "串行接口",
        "content": "串行接口是在设备与接口间一位一位传送(如Intel 8251)。"
    },
    {
        "summary": "可编程接口",
        "content": "可编程接口的功能及操 作方式可用程序来改变或选择(如Intel 8255、Intel 8251)"
    },
    {
        "summary": "不可编程接口",
        "content": "不可编程接口不能由程序来改变其功能，但可通过硬连线逻辑来实现不同的功能(如Intel  8212)"
    },
    {
        "summary": "通用接口",
        "content": "通用接口可供多种I/0设备使用，如 Intel 8255、 Intel 8212"
    },
    {
        "summary": "专用接口",
        "content": "专用接口是为某类外设或某种用途专门设计的，如 Intel 8279可编程键盘/显示器接口；Intel 8275 可编程CRT控制器接口等。"
    },
    {
        "summary": "程序型接口",
        "content": "程序型接口用于连接速度较 慢的/0设备，如显示终端、键盘、打印机等"
    },
    {
        "summary": "DMA型接口",
        "content": "DMA型接口用于连接高速I/0  设备，如磁盘、磁带等，如Intel 8257"
    },
    {
        "summary": "中断",
        "content": "计算机在执行程序的过程中，当出现异常情况或特殊请求时，计算机停止现行程序的运行， 转向对这些异常情况或特殊请求的处理，处理结束后再返回到现行程序的间断处，继续执行原程  序，这就是“中断”"
    },
    {
        "summary": "I/O中断的产生原因",
        "content": "在I/O 设备与主机交换信息时，由于设备本身机电特性的影响，其工作速度较低，与CPU 无 法匹配，因此，CPU 启动设备后，往往需要等待一段时间才能实现主机与I/O 设备之间的信息交 换。如果在设备准备的同时，CPU 不作无谓的等待，而继续执行现行程序，只有当I/0 设备准备就绪向CPU提出请求后，再暂时中断CPU现行程序转入1/O 服务程序，这便产生了I/0  中断。"
    },
    {
        "summary": "中断请求触发器",
        "content": "每台外部设备都必须配置一个中断请求触发器 INTR, 当其为“1”时，表示该设备向 CPU 提 出中断请求。但是设备欲提出中断请求时，其设备本身必须准备就绪，即接口内的完成触发器D的状态必须为“1”。"
    },
    {
        "summary": "中断向量地址形成部件",
        "content": "CPU一旦响应了1/0中断，就要暂停现行程序，转去执行该设备的中断服务程序。不同的设备有不同的中断服务程序，每个服务程序都有一个入口地址，CPU必须找到这个入口地址。"
    },
    {
        "summary": "硬件向量法",
        "content": "所谓硬件向量 法，就是通过向量地址来寻找设备的中断服务程序入口地址，而且向量地址是由硬件电路产生"
    },
    {
        "summary": "CPU响应中断的条件",
        "content": "CPU响应I/0设备提出中断请求的条件是必须满足CPU中的允许中断触发器 EINT 为 “1”"
    },
    {
        "summary": "开中断",
        "content": "该触发器可用开中断指令置位(称为开中断)"
    },
    {
        "summary": "关中断",
        "content": "可用关中断指令或硬件自动使其复位(称为关中断)"
    },
    {
        "summary": "中断处理过程",
        "content": "中断服务程序的最后一条指令是中断返回指令，当其执行结束时，即中断返回至原程序的断点处。至此， 一个完整的程序中断处理过程即告结束。"
    },
    {
        "summary": "中断服务程序的流程",
        "content": "一般中断服务程序的流程分四大部分：保护现场、中断服务、恢复现场和中断返回。"
    },
    {
        "summary": "保护现场",
        "content": "保护现场有两个含义，其一是保存程序的断点；其二是保存通用寄存器和状态寄存器的内 容。"
    },
    {
        "summary": "中断服务",
        "content": "这是中断服务程序的主体部分，对于不同的中断请求源，其中断服务操作内容是不同的，例 如，打印机要求CPU将需打印的一行字符代码，通过接口送入打印机的缓冲存储器中(参见图 5.23)以供打印机打印。又如，显示设备要求CPU 将需显示的一屏字符代码通过接口送入显示器的显示存储器中"
    },
    {
        "summary": "恢复现场",
        "content": "恢复现场：这是中断服务程序的结尾部分，要求在退出服务程序前，将原程序中断时的“现场”恢复到 原来的寄存器中。通常可用取数指令或出栈指令(POP),  将保存在存储器(或堆栈)中的信息送回到原来的寄存器中。"
    },
    {
        "summary": "中断返回",
        "content": "中断服务程序的最后一条指令通常是一条中断返回指令，使其返回到原程序的断点处，以便继续执行原程序。"
    },
    {
        "summary": "程序中断方式的优点",
        "content": "从宏观上分析；程序中断方式克服了程序查询方式中的CPU“踏步”现象，实现了 CPU 与I/0 的并行工作，提高了CPU 的资源利用率"
    },
    {
        "summary": "DMA与主存交换数据的方法",
        "content": "为了有效地分时使用主存，通常DMA与主存交换数据时采用如下三种方法。(1)停止CPU访问主存(2)周期挪用(或周期窃取)(3)DMA与CPU交替访问"
    },
    {
        "summary": "停止CPU访问主存",
        "content": "当外设要求传送一批数据时，由DMA接口向CPU发一个停止信号，要求CPU放弃地址线、 数据线和有关控制线的使用权。DMA接口获得总线控制权后，开始进行数据传送，在数据传送  结束后，DMA接口通知CPU可以使用主存，"
    },
    {
        "summary": "周期挪用",
        "content": "周期挪用：在这种方法中，每当I/0 设备发出DMA 请求时，I/0 设备便挪用或窃取总线占用权一个或几个主存周期，而 DMA 不请求时，CPU 仍继续访问主存。"
    },
    {
        "summary": "DMA与CPU交替访问",
        "content": "DMA与CPU交替访问：这种方法适合于CPU的工作周期比主存存取周期长的情况。例如，CPU的工作周期为1.2 μs,主存的存取周期小于0.6 μs,那么可将一个CPU 周期分为C  和C₂  两个分周期，其中C,专供 DMA访存，C₂ 专供CPU访存，如图5.46(c) 所示。"
    },
    {
        "summary": "DMA接口的功能",
        "content": "DMA 接口应具有如下几个功能。① 向 CPU申请DMA传送。② 在 CPU允许 DMA工作时，处理总线控制权的转交，避免因进入 DMA 工作而影响CPU正常活动或引起总线竞争。"
    },
    {
        "summary": "DMA接口基本组成",
        "content": "最简单的DMA接口组成原理如图5.47所示，它由以下几个逻辑部件组成。(1)主存地址寄存器(AR)(2)字计数器(WC)(3)数据缓冲寄存器(BR)(4)DMA控制逻辑(5)中断机构(6)设备地址寄存器(DAR)"
    },
    {
        "summary": "主存地址寄存器的作用",
        "content": "AR用于存放主存中需要交换数据的地址。在DMA传送数据前，必须通过程序将数据在主 存中的首地址送到主存地址寄存器。在 DMA传送过程中，每交换一次数据，将地址寄存器内容加1,直到一批数据传送完毕为止。"
    },
    {
        "summary": "字计数器的功能",
        "content": "WC用于记录传送数据的总字数，通常以交换字数的补码值预置。"
    },
    {
        "summary": "数据缓冲寄存器(BR)的作用",
        "content": "BR用于暂存每次传送的数据。"
    },
    {
        "summary": "DMA控制逻辑",
        "content": "DMA控制逻辑负责管理DMA的传送过程，由控制电路、时序电路及命令状态控制寄存器等 组成。"
    },
    {
        "summary": "设备地址寄存器(DAR)的作用",
        "content": "DAR存放I/0设备的设备码或表示设备信息存储区的寻址信息，如磁盘数据所在的区号、盘面号和柱面号。"
    },
    {
        "summary": "DMA传送过程",
        "content": "DMA 的数据传送过程分为预处理、数据传送和后处理3个阶段。"
    },
    {
        "summary": "DMA接口的类型",
        "content": "现代集成电路制造技术已将DMA接口制成芯片，通常有选择型和多路型两类。"
    },
    {
        "summary": "小数点的表示",
        "content": "在计算机中，小数点不用专门的器件表示，而是按约定的方式标出，共有两种方法表示小数点的存在，即定点表示和浮点表示。定点表示的数称为定点数，浮点表示的数称为浮点数。"
    },
    {
        "summary": "定点数",
        "content": "小数点固定在某一位置的数为定点数"
    },
    {
        "summary": "浮点数",
        "content": "浮点数即小数点的位置可以浮动的数"
    }
]